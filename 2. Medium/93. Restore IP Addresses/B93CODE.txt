import java.util.ArrayList;
import java.util.List;

public class B93 {
    // Wrapper function to return the result
    public List<String> restoreIpAddresses(String s) {
        // Create a list to store the result
        ArrayList<String> result = new ArrayList<>();
        // Call the recursive function to process the string
        restoreIpAddresses(result, new char[s.length() + 3], 0, s, 0, 0);
        // Return the result
        return result;
    }
    // result: This is a list of Strings that will store the final output.
    // buffer: This is a character array that is used to store the intermediate IP address during the calculation process.
    // x: This is the starting position in the buffer array where the current IP address segment is stored.
    // s: This is the input string that contains the IP address.
    // index: This is the starting position in the input string where the current IP address segment starts.
    // number: This is the current segment of the IP address being processed. It ranges from 1 to 4, representing the 4 segments of an IP address.
    public void restoreIpAddresses(List<String> result, char[] buffer, int x, String s, int index, int number) {
        // Checks if the length of the current extracted IP address segment is 4 characters long
        if (number == 4) {
            // Check if the entire input string s has been processed
            if (index == s.length()) {
                // If yes, add the buffer containing IP address to result
                result.add(new String(buffer));
            }
            // Return to prevent further processing
            return;
        }
        // Store converted sequence of digits in int, from s string
        int mem = 0;
        // Loop through 3 characters of the string 's',
        // starting from the current position given by 'index'.
        // The loop continues as long as 'i' is less than 3
        // The loop continues only if there are still i characters remaining in the string after the current position 'index'
        // This limits the loop to only get at most 3 characters from the string 's' at each iteration
        for (int i = 0; i < 3 && index + i < s.length(); i++) {
            // Convert a sequence of digits in the input string s into an integer value
            mem = mem * 10 + s.charAt(index + i) - '0';
            // Condition 1:  If the integer value is larger than 255, break the loop
            if (mem > 255) break;
            // Copies the current character from the input string s, to the buffer array at the position x + i
            buffer[x + i] = s.charAt(index + i);
            // If there is enough room in the buffer array (i.e. x + i + 1 < buffer.length),
            // Check whether there is enough space in the buffer array to store the next character
            if (x + i + 1 < buffer.length) {
                // Then a dot '.' is added at the index x + i + 1 in buffer[x + i + 1], after previous character (at index x + i) in buffer[x + i],
                buffer[x + i + 1] = '.';
            }
            // Recursively call the function to process the next integer
            restoreIpAddresses(result, buffer, x + i + 2, s, index + i + 1, number + 1);
            // Condition 2: Checks if the computed integer value mem has leading zeros, and if so, it stops the loop
            if (mem == 0) break;
        }
    }

}





import java.util.ArrayList;
import java.util.List;

public class B93 {
    
    /*
    * This method is used to restore IP addresses from given string
    * Returns a list of all possible valid IP addresses
    */
    public List<String> restoreIpAddresses(String s) {
        // Initialize the result list
        List<String> result = new ArrayList<>();
        // Create a buffer to store the possible IP address
        char[] buffer = new char[s.length() + 3];
        // Call the helper method to get all possible valid IP addresses
        restoreIpAddresses(result, buffer, 0, s, 0, 0);
        // Return the result list
        return result;
    }

    /*
    * This is a helper method which is used to restore IP addresses recursively
    * result: list to store all possible valid IP addresses
    * buffer: temporary array to store the IP address
    * bufferIndex: current index of the buffer
    * s: input string
    * sIndex: current index of the input string
    * segmentCount: current number of segments in the IP address
    */
    public void restoreIpAddresses(List<String> result, char[] buffer, int bufferIndex, String s, int sIndex, int segmentCount) {
        // If the number of segments is 4, check if all the characters in the input string are used
        if (segmentCount == 4) {
            // If all the characters are used, add the buffer content as a valid IP address to the result list
            if (sIndex == s.length()) {
                result.add(new String(buffer));
            }
            // If not, return without doing anything
            return;
        }

        // Create a variable to store the current segment value
        int currentSegment = 0;
        // Loop through the possible length of the segment (maximum 3 characters)
        for (int i = 0; i < 3 && sIndex + i < s.length(); i++) {
            // Calculate the current segment value
            currentSegment = currentSegment * 10 + s.charAt(sIndex + i) - '0';
            // If the current segment value is larger than 255, break the loop
            if (currentSegment > 255) break;
            // Copy the current segment characters to the buffer
            buffer[bufferIndex + i] = s.charAt(sIndex + i);
            // If there is still room in the buffer, add a dot character after the current segment
            if (bufferIndex + i + 1 < buffer.length) {
                buffer[bufferIndex + i + 1] = '.';
            }
            // Call the helper method recursively to restore the next segment
            restoreIpAddresses(result, buffer, bufferIndex + i + 2, s, sIndex + i + 1, segmentCount + 1);
            // If the current segment is 0, break the loop
            if (currentSegment == 0) break;
        }
    }
}
